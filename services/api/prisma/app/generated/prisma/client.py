# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('/home/zuikre/podacium/services/api/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'debian-openssl-3.0.x': '/home/zuikre/.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/prisma/query-engine-debian-openssl-3.0.x'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    user: 'actions.UserActions[models.User]'
    organization: 'actions.OrganizationActions[models.Organization]'
    organizationmember: 'actions.OrganizationMemberActions[models.OrganizationMember]'
    path: 'actions.PathActions[models.Path]'
    module: 'actions.ModuleActions[models.Module]'
    pathmodule: 'actions.PathModuleActions[models.PathModule]'
    lesson: 'actions.LessonActions[models.Lesson]'
    enrollment: 'actions.EnrollmentActions[models.Enrollment]'
    lessonprogress: 'actions.LessonProgressActions[models.LessonProgress]'
    certificate: 'actions.CertificateActions[models.Certificate]'
    project: 'actions.ProjectActions[models.Project]'
    proposal: 'actions.ProposalActions[models.Proposal]'
    contract: 'actions.ContractActions[models.Contract]'
    delivery: 'actions.DeliveryActions[models.Delivery]'
    userskill: 'actions.UserSkillActions[models.UserSkill]'
    dataset: 'actions.DatasetActions[models.Dataset]'
    dashboard: 'actions.DashboardActions[models.Dashboard]'
    dashboarddataset: 'actions.DashboardDatasetActions[models.DashboardDataset]'
    widget: 'actions.WidgetActions[models.Widget]'
    insight: 'actions.InsightActions[models.Insight]'
    mlmodel: 'actions.MLModelActions[models.MLModel]'
    transaction: 'actions.TransactionActions[models.Transaction]'
    subscription: 'actions.SubscriptionActions[models.Subscription]'
    notification: 'actions.NotificationActions[models.Notification]'
    authtoken: 'actions.AuthTokenActions[models.AuthToken]'
    file: 'actions.FileActions[models.File]'
    auditlog: 'actions.AuditLogActions[models.AuditLog]'

    __slots__ = (
        'user',
        'organization',
        'organizationmember',
        'path',
        'module',
        'pathmodule',
        'lesson',
        'enrollment',
        'lessonprogress',
        'certificate',
        'project',
        'proposal',
        'contract',
        'delivery',
        'userskill',
        'dataset',
        'dashboard',
        'dashboarddataset',
        'widget',
        'insight',
        'mlmodel',
        'transaction',
        'subscription',
        'notification',
        'authtoken',
        'file',
        'auditlog',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set([]),
            active_provider='postgresql',
            default_datasource_name='db',
        )

        self.user = actions.UserActions[models.User](self, models.User)
        self.organization = actions.OrganizationActions[models.Organization](self, models.Organization)
        self.organizationmember = actions.OrganizationMemberActions[models.OrganizationMember](self, models.OrganizationMember)
        self.path = actions.PathActions[models.Path](self, models.Path)
        self.module = actions.ModuleActions[models.Module](self, models.Module)
        self.pathmodule = actions.PathModuleActions[models.PathModule](self, models.PathModule)
        self.lesson = actions.LessonActions[models.Lesson](self, models.Lesson)
        self.enrollment = actions.EnrollmentActions[models.Enrollment](self, models.Enrollment)
        self.lessonprogress = actions.LessonProgressActions[models.LessonProgress](self, models.LessonProgress)
        self.certificate = actions.CertificateActions[models.Certificate](self, models.Certificate)
        self.project = actions.ProjectActions[models.Project](self, models.Project)
        self.proposal = actions.ProposalActions[models.Proposal](self, models.Proposal)
        self.contract = actions.ContractActions[models.Contract](self, models.Contract)
        self.delivery = actions.DeliveryActions[models.Delivery](self, models.Delivery)
        self.userskill = actions.UserSkillActions[models.UserSkill](self, models.UserSkill)
        self.dataset = actions.DatasetActions[models.Dataset](self, models.Dataset)
        self.dashboard = actions.DashboardActions[models.Dashboard](self, models.Dashboard)
        self.dashboarddataset = actions.DashboardDatasetActions[models.DashboardDataset](self, models.DashboardDataset)
        self.widget = actions.WidgetActions[models.Widget](self, models.Widget)
        self.insight = actions.InsightActions[models.Insight](self, models.Insight)
        self.mlmodel = actions.MLModelActions[models.MLModel](self, models.MLModel)
        self.transaction = actions.TransactionActions[models.Transaction](self, models.Transaction)
        self.subscription = actions.SubscriptionActions[models.Subscription](self, models.Subscription)
        self.notification = actions.NotificationActions[models.Notification](self, models.Notification)
        self.authtoken = actions.AuthTokenActions[models.AuthToken](self, models.AuthToken)
        self.file = actions.FileActions[models.File](self, models.File)
        self.auditlog = actions.AuditLogActions[models.AuditLog](self, models.AuditLog)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': '/home/zuikre/podacium/services/api/prisma/schema.prisma',
        }

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    user: 'UserBatchActions'
    organization: 'OrganizationBatchActions'
    organizationmember: 'OrganizationMemberBatchActions'
    path: 'PathBatchActions'
    module: 'ModuleBatchActions'
    pathmodule: 'PathModuleBatchActions'
    lesson: 'LessonBatchActions'
    enrollment: 'EnrollmentBatchActions'
    lessonprogress: 'LessonProgressBatchActions'
    certificate: 'CertificateBatchActions'
    project: 'ProjectBatchActions'
    proposal: 'ProposalBatchActions'
    contract: 'ContractBatchActions'
    delivery: 'DeliveryBatchActions'
    userskill: 'UserSkillBatchActions'
    dataset: 'DatasetBatchActions'
    dashboard: 'DashboardBatchActions'
    dashboarddataset: 'DashboardDatasetBatchActions'
    widget: 'WidgetBatchActions'
    insight: 'InsightBatchActions'
    mlmodel: 'MLModelBatchActions'
    transaction: 'TransactionBatchActions'
    subscription: 'SubscriptionBatchActions'
    notification: 'NotificationBatchActions'
    authtoken: 'AuthTokenBatchActions'
    file: 'FileBatchActions'
    auditlog: 'AuditLogBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.user = UserBatchActions(self)
        self.organization = OrganizationBatchActions(self)
        self.organizationmember = OrganizationMemberBatchActions(self)
        self.path = PathBatchActions(self)
        self.module = ModuleBatchActions(self)
        self.pathmodule = PathModuleBatchActions(self)
        self.lesson = LessonBatchActions(self)
        self.enrollment = EnrollmentBatchActions(self)
        self.lessonprogress = LessonProgressBatchActions(self)
        self.certificate = CertificateBatchActions(self)
        self.project = ProjectBatchActions(self)
        self.proposal = ProposalBatchActions(self)
        self.contract = ContractBatchActions(self)
        self.delivery = DeliveryBatchActions(self)
        self.userskill = UserSkillBatchActions(self)
        self.dataset = DatasetBatchActions(self)
        self.dashboard = DashboardBatchActions(self)
        self.dashboarddataset = DashboardDatasetBatchActions(self)
        self.widget = WidgetBatchActions(self)
        self.insight = InsightBatchActions(self)
        self.mlmodel = MLModelBatchActions(self)
        self.transaction = TransactionBatchActions(self)
        self.subscription = SubscriptionBatchActions(self)
        self.notification = NotificationBatchActions(self)
        self.authtoken = AuthTokenBatchActions(self)
        self.file = FileBatchActions(self)
        self.auditlog = AuditLogBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.User,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.User,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.User,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.User,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.User,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class OrganizationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.OrganizationCreateInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Organization,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.OrganizationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Organization,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Organization,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.OrganizationUpdateInput,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Organization,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.OrganizationWhereUniqueInput,
        data: types.OrganizationUpsertInput,
        include: Optional[types.OrganizationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Organization,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.OrganizationUpdateManyMutationInput,
        where: types.OrganizationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Organization,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.OrganizationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Organization,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class OrganizationMemberBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.OrganizationMemberCreateInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.OrganizationMember,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.OrganizationMemberCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.OrganizationMember,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.OrganizationMemberWhereUniqueInput,
        include: Optional[types.OrganizationMemberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.OrganizationMember,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.OrganizationMemberUpdateInput,
        where: types.OrganizationMemberWhereUniqueInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.OrganizationMember,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.OrganizationMemberWhereUniqueInput,
        data: types.OrganizationMemberUpsertInput,
        include: Optional[types.OrganizationMemberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.OrganizationMember,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.OrganizationMemberUpdateManyMutationInput,
        where: types.OrganizationMemberWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.OrganizationMember,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.OrganizationMemberWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.OrganizationMember,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PathBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PathCreateInput,
        include: Optional[types.PathInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Path,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PathCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Path,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PathWhereUniqueInput,
        include: Optional[types.PathInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Path,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PathUpdateInput,
        where: types.PathWhereUniqueInput,
        include: Optional[types.PathInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Path,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PathWhereUniqueInput,
        data: types.PathUpsertInput,
        include: Optional[types.PathInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Path,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PathUpdateManyMutationInput,
        where: types.PathWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Path,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PathWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Path,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ModuleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ModuleCreateInput,
        include: Optional[types.ModuleInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Module,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ModuleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Module,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ModuleWhereUniqueInput,
        include: Optional[types.ModuleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Module,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ModuleUpdateInput,
        where: types.ModuleWhereUniqueInput,
        include: Optional[types.ModuleInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Module,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ModuleWhereUniqueInput,
        data: types.ModuleUpsertInput,
        include: Optional[types.ModuleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Module,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ModuleUpdateManyMutationInput,
        where: types.ModuleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Module,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ModuleWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Module,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PathModuleBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PathModuleCreateInput,
        include: Optional[types.PathModuleInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.PathModule,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PathModuleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.PathModule,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PathModuleWhereUniqueInput,
        include: Optional[types.PathModuleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.PathModule,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PathModuleUpdateInput,
        where: types.PathModuleWhereUniqueInput,
        include: Optional[types.PathModuleInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.PathModule,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PathModuleWhereUniqueInput,
        data: types.PathModuleUpsertInput,
        include: Optional[types.PathModuleInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.PathModule,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PathModuleUpdateManyMutationInput,
        where: types.PathModuleWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.PathModule,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PathModuleWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.PathModule,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class LessonBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.LessonCreateInput,
        include: Optional[types.LessonInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Lesson,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.LessonCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Lesson,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.LessonWhereUniqueInput,
        include: Optional[types.LessonInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Lesson,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.LessonUpdateInput,
        where: types.LessonWhereUniqueInput,
        include: Optional[types.LessonInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Lesson,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.LessonWhereUniqueInput,
        data: types.LessonUpsertInput,
        include: Optional[types.LessonInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Lesson,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.LessonUpdateManyMutationInput,
        where: types.LessonWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Lesson,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.LessonWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Lesson,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class EnrollmentBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.EnrollmentCreateInput,
        include: Optional[types.EnrollmentInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Enrollment,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.EnrollmentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Enrollment,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.EnrollmentWhereUniqueInput,
        include: Optional[types.EnrollmentInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Enrollment,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.EnrollmentUpdateInput,
        where: types.EnrollmentWhereUniqueInput,
        include: Optional[types.EnrollmentInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Enrollment,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.EnrollmentWhereUniqueInput,
        data: types.EnrollmentUpsertInput,
        include: Optional[types.EnrollmentInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Enrollment,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.EnrollmentUpdateManyMutationInput,
        where: types.EnrollmentWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Enrollment,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.EnrollmentWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Enrollment,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class LessonProgressBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.LessonProgressCreateInput,
        include: Optional[types.LessonProgressInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.LessonProgress,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.LessonProgressCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.LessonProgress,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.LessonProgressWhereUniqueInput,
        include: Optional[types.LessonProgressInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.LessonProgress,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.LessonProgressUpdateInput,
        where: types.LessonProgressWhereUniqueInput,
        include: Optional[types.LessonProgressInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.LessonProgress,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.LessonProgressWhereUniqueInput,
        data: types.LessonProgressUpsertInput,
        include: Optional[types.LessonProgressInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.LessonProgress,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.LessonProgressUpdateManyMutationInput,
        where: types.LessonProgressWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.LessonProgress,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.LessonProgressWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.LessonProgress,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CertificateBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CertificateCreateInput,
        include: Optional[types.CertificateInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Certificate,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CertificateCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Certificate,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CertificateWhereUniqueInput,
        include: Optional[types.CertificateInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Certificate,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CertificateUpdateInput,
        where: types.CertificateWhereUniqueInput,
        include: Optional[types.CertificateInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Certificate,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CertificateWhereUniqueInput,
        data: types.CertificateUpsertInput,
        include: Optional[types.CertificateInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Certificate,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CertificateUpdateManyMutationInput,
        where: types.CertificateWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Certificate,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CertificateWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Certificate,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ProjectBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ProjectCreateInput,
        include: Optional[types.ProjectInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Project,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ProjectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Project,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Project,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ProjectUpdateInput,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Project,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ProjectWhereUniqueInput,
        data: types.ProjectUpsertInput,
        include: Optional[types.ProjectInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Project,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ProjectUpdateManyMutationInput,
        where: types.ProjectWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Project,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ProjectWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Project,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ProposalBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ProposalCreateInput,
        include: Optional[types.ProposalInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Proposal,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ProposalCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Proposal,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ProposalWhereUniqueInput,
        include: Optional[types.ProposalInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Proposal,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ProposalUpdateInput,
        where: types.ProposalWhereUniqueInput,
        include: Optional[types.ProposalInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Proposal,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ProposalWhereUniqueInput,
        data: types.ProposalUpsertInput,
        include: Optional[types.ProposalInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Proposal,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ProposalUpdateManyMutationInput,
        where: types.ProposalWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Proposal,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ProposalWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Proposal,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ContractBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ContractCreateInput,
        include: Optional[types.ContractInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Contract,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ContractCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Contract,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ContractWhereUniqueInput,
        include: Optional[types.ContractInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Contract,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ContractUpdateInput,
        where: types.ContractWhereUniqueInput,
        include: Optional[types.ContractInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Contract,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ContractWhereUniqueInput,
        data: types.ContractUpsertInput,
        include: Optional[types.ContractInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Contract,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ContractUpdateManyMutationInput,
        where: types.ContractWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Contract,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ContractWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Contract,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DeliveryBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DeliveryCreateInput,
        include: Optional[types.DeliveryInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Delivery,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DeliveryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Delivery,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DeliveryWhereUniqueInput,
        include: Optional[types.DeliveryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Delivery,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DeliveryUpdateInput,
        where: types.DeliveryWhereUniqueInput,
        include: Optional[types.DeliveryInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Delivery,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DeliveryWhereUniqueInput,
        data: types.DeliveryUpsertInput,
        include: Optional[types.DeliveryInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Delivery,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DeliveryUpdateManyMutationInput,
        where: types.DeliveryWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Delivery,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DeliveryWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Delivery,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserSkillBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserSkillCreateInput,
        include: Optional[types.UserSkillInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.UserSkill,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserSkillCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.UserSkill,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserSkillWhereUniqueInput,
        include: Optional[types.UserSkillInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.UserSkill,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserSkillUpdateInput,
        where: types.UserSkillWhereUniqueInput,
        include: Optional[types.UserSkillInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.UserSkill,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserSkillWhereUniqueInput,
        data: types.UserSkillUpsertInput,
        include: Optional[types.UserSkillInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.UserSkill,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserSkillUpdateManyMutationInput,
        where: types.UserSkillWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.UserSkill,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserSkillWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.UserSkill,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DatasetBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DatasetCreateInput,
        include: Optional[types.DatasetInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Dataset,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DatasetCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Dataset,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DatasetWhereUniqueInput,
        include: Optional[types.DatasetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Dataset,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DatasetUpdateInput,
        where: types.DatasetWhereUniqueInput,
        include: Optional[types.DatasetInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Dataset,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DatasetWhereUniqueInput,
        data: types.DatasetUpsertInput,
        include: Optional[types.DatasetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Dataset,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DatasetUpdateManyMutationInput,
        where: types.DatasetWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Dataset,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DatasetWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Dataset,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DashboardBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DashboardCreateInput,
        include: Optional[types.DashboardInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Dashboard,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DashboardCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Dashboard,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DashboardWhereUniqueInput,
        include: Optional[types.DashboardInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Dashboard,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DashboardUpdateInput,
        where: types.DashboardWhereUniqueInput,
        include: Optional[types.DashboardInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Dashboard,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DashboardWhereUniqueInput,
        data: types.DashboardUpsertInput,
        include: Optional[types.DashboardInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Dashboard,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DashboardUpdateManyMutationInput,
        where: types.DashboardWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Dashboard,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DashboardWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Dashboard,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DashboardDatasetBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DashboardDatasetCreateInput,
        include: Optional[types.DashboardDatasetInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.DashboardDataset,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DashboardDatasetCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.DashboardDataset,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DashboardDatasetWhereUniqueInput,
        include: Optional[types.DashboardDatasetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.DashboardDataset,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DashboardDatasetUpdateInput,
        where: types.DashboardDatasetWhereUniqueInput,
        include: Optional[types.DashboardDatasetInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.DashboardDataset,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DashboardDatasetWhereUniqueInput,
        data: types.DashboardDatasetUpsertInput,
        include: Optional[types.DashboardDatasetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.DashboardDataset,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DashboardDatasetUpdateManyMutationInput,
        where: types.DashboardDatasetWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.DashboardDataset,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DashboardDatasetWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.DashboardDataset,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class WidgetBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.WidgetCreateInput,
        include: Optional[types.WidgetInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Widget,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.WidgetCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Widget,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.WidgetWhereUniqueInput,
        include: Optional[types.WidgetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Widget,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.WidgetUpdateInput,
        where: types.WidgetWhereUniqueInput,
        include: Optional[types.WidgetInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Widget,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.WidgetWhereUniqueInput,
        data: types.WidgetUpsertInput,
        include: Optional[types.WidgetInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Widget,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.WidgetUpdateManyMutationInput,
        where: types.WidgetWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Widget,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.WidgetWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Widget,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class InsightBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.InsightCreateInput,
        include: Optional[types.InsightInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Insight,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.InsightCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Insight,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.InsightWhereUniqueInput,
        include: Optional[types.InsightInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Insight,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.InsightUpdateInput,
        where: types.InsightWhereUniqueInput,
        include: Optional[types.InsightInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Insight,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.InsightWhereUniqueInput,
        data: types.InsightUpsertInput,
        include: Optional[types.InsightInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Insight,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.InsightUpdateManyMutationInput,
        where: types.InsightWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Insight,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.InsightWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Insight,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MLModelBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MLModelCreateInput,
        include: Optional[types.MLModelInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.MLModel,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MLModelCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.MLModel,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MLModelWhereUniqueInput,
        include: Optional[types.MLModelInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.MLModel,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MLModelUpdateInput,
        where: types.MLModelWhereUniqueInput,
        include: Optional[types.MLModelInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.MLModel,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MLModelWhereUniqueInput,
        data: types.MLModelUpsertInput,
        include: Optional[types.MLModelInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.MLModel,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MLModelUpdateManyMutationInput,
        where: types.MLModelWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.MLModel,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MLModelWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.MLModel,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class TransactionBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.TransactionCreateInput,
        include: Optional[types.TransactionInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Transaction,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.TransactionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Transaction,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.TransactionWhereUniqueInput,
        include: Optional[types.TransactionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Transaction,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.TransactionUpdateInput,
        where: types.TransactionWhereUniqueInput,
        include: Optional[types.TransactionInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Transaction,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.TransactionWhereUniqueInput,
        data: types.TransactionUpsertInput,
        include: Optional[types.TransactionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Transaction,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.TransactionUpdateManyMutationInput,
        where: types.TransactionWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Transaction,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.TransactionWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Transaction,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class SubscriptionBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.SubscriptionCreateInput,
        include: Optional[types.SubscriptionInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Subscription,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.SubscriptionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Subscription,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.SubscriptionWhereUniqueInput,
        include: Optional[types.SubscriptionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Subscription,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.SubscriptionUpdateInput,
        where: types.SubscriptionWhereUniqueInput,
        include: Optional[types.SubscriptionInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Subscription,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.SubscriptionWhereUniqueInput,
        data: types.SubscriptionUpsertInput,
        include: Optional[types.SubscriptionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Subscription,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.SubscriptionUpdateManyMutationInput,
        where: types.SubscriptionWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Subscription,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.SubscriptionWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Subscription,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class NotificationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.NotificationCreateInput,
        include: Optional[types.NotificationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Notification,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.NotificationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Notification,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.NotificationWhereUniqueInput,
        include: Optional[types.NotificationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Notification,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.NotificationUpdateInput,
        where: types.NotificationWhereUniqueInput,
        include: Optional[types.NotificationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Notification,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.NotificationWhereUniqueInput,
        data: types.NotificationUpsertInput,
        include: Optional[types.NotificationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Notification,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.NotificationUpdateManyMutationInput,
        where: types.NotificationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Notification,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.NotificationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Notification,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AuthTokenBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AuthTokenCreateInput,
        include: Optional[types.AuthTokenInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.AuthToken,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.AuthTokenCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.AuthToken,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AuthTokenWhereUniqueInput,
        include: Optional[types.AuthTokenInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.AuthToken,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AuthTokenUpdateInput,
        where: types.AuthTokenWhereUniqueInput,
        include: Optional[types.AuthTokenInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.AuthToken,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AuthTokenWhereUniqueInput,
        data: types.AuthTokenUpsertInput,
        include: Optional[types.AuthTokenInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.AuthToken,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AuthTokenUpdateManyMutationInput,
        where: types.AuthTokenWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.AuthToken,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.AuthTokenWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.AuthToken,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FileBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FileCreateInput,
        include: Optional[types.FileInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.File,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FileCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.File,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FileWhereUniqueInput,
        include: Optional[types.FileInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.File,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FileUpdateInput,
        where: types.FileWhereUniqueInput,
        include: Optional[types.FileInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.File,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FileWhereUniqueInput,
        data: types.FileUpsertInput,
        include: Optional[types.FileInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.File,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FileUpdateManyMutationInput,
        where: types.FileWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.File,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FileWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.File,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AuditLogBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AuditLogCreateInput,
        include: Optional[types.AuditLogInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.AuditLog,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.AuditLogCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.AuditLog,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AuditLogWhereUniqueInput,
        include: Optional[types.AuditLogInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.AuditLog,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AuditLogUpdateInput,
        where: types.AuditLogWhereUniqueInput,
        include: Optional[types.AuditLogInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.AuditLog,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AuditLogWhereUniqueInput,
        data: types.AuditLogUpsertInput,
        include: Optional[types.AuditLogInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.AuditLog,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AuditLogUpdateManyMutationInput,
        where: types.AuditLogWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.AuditLog,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.AuditLogWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.AuditLog,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma