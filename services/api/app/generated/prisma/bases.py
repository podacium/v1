# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseOrganization(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Organization']] = 'Organization'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OrganizationActions[_PrismaModelT]':
        from .client import get_client

        return actions.OrganizationActions[_PrismaModelT](client or get_client(), cls)


class BaseOrganizationMember(_PrismaModel):
    __prisma_model__: ClassVar[Literal['OrganizationMember']] = 'OrganizationMember'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OrganizationMemberActions[_PrismaModelT]':
        from .client import get_client

        return actions.OrganizationMemberActions[_PrismaModelT](client or get_client(), cls)


class BasePath(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Path']] = 'Path'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PathActions[_PrismaModelT]':
        from .client import get_client

        return actions.PathActions[_PrismaModelT](client or get_client(), cls)


class BaseModule(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Module']] = 'Module'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ModuleActions[_PrismaModelT]':
        from .client import get_client

        return actions.ModuleActions[_PrismaModelT](client or get_client(), cls)


class BasePathModule(_PrismaModel):
    __prisma_model__: ClassVar[Literal['PathModule']] = 'PathModule'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PathModuleActions[_PrismaModelT]':
        from .client import get_client

        return actions.PathModuleActions[_PrismaModelT](client or get_client(), cls)


class BaseLesson(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Lesson']] = 'Lesson'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.LessonActions[_PrismaModelT]':
        from .client import get_client

        return actions.LessonActions[_PrismaModelT](client or get_client(), cls)


class BaseEnrollment(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Enrollment']] = 'Enrollment'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.EnrollmentActions[_PrismaModelT]':
        from .client import get_client

        return actions.EnrollmentActions[_PrismaModelT](client or get_client(), cls)


class BaseLessonProgress(_PrismaModel):
    __prisma_model__: ClassVar[Literal['LessonProgress']] = 'LessonProgress'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.LessonProgressActions[_PrismaModelT]':
        from .client import get_client

        return actions.LessonProgressActions[_PrismaModelT](client or get_client(), cls)


class BaseCertificate(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Certificate']] = 'Certificate'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CertificateActions[_PrismaModelT]':
        from .client import get_client

        return actions.CertificateActions[_PrismaModelT](client or get_client(), cls)


class BaseProject(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Project']] = 'Project'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ProjectActions[_PrismaModelT]':
        from .client import get_client

        return actions.ProjectActions[_PrismaModelT](client or get_client(), cls)


class BaseProposal(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Proposal']] = 'Proposal'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ProposalActions[_PrismaModelT]':
        from .client import get_client

        return actions.ProposalActions[_PrismaModelT](client or get_client(), cls)


class BaseContract(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Contract']] = 'Contract'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ContractActions[_PrismaModelT]':
        from .client import get_client

        return actions.ContractActions[_PrismaModelT](client or get_client(), cls)


class BaseDelivery(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Delivery']] = 'Delivery'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DeliveryActions[_PrismaModelT]':
        from .client import get_client

        return actions.DeliveryActions[_PrismaModelT](client or get_client(), cls)


class BaseUserSkill(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserSkill']] = 'UserSkill'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserSkillActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserSkillActions[_PrismaModelT](client or get_client(), cls)


class BaseDataset(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Dataset']] = 'Dataset'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DatasetActions[_PrismaModelT]':
        from .client import get_client

        return actions.DatasetActions[_PrismaModelT](client or get_client(), cls)


class BaseDashboard(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Dashboard']] = 'Dashboard'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DashboardActions[_PrismaModelT]':
        from .client import get_client

        return actions.DashboardActions[_PrismaModelT](client or get_client(), cls)


class BaseDashboardDataset(_PrismaModel):
    __prisma_model__: ClassVar[Literal['DashboardDataset']] = 'DashboardDataset'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DashboardDatasetActions[_PrismaModelT]':
        from .client import get_client

        return actions.DashboardDatasetActions[_PrismaModelT](client or get_client(), cls)


class BaseWidget(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Widget']] = 'Widget'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.WidgetActions[_PrismaModelT]':
        from .client import get_client

        return actions.WidgetActions[_PrismaModelT](client or get_client(), cls)


class BaseInsight(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Insight']] = 'Insight'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.InsightActions[_PrismaModelT]':
        from .client import get_client

        return actions.InsightActions[_PrismaModelT](client or get_client(), cls)


class BaseMLModel(_PrismaModel):
    __prisma_model__: ClassVar[Literal['MLModel']] = 'MLModel'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MLModelActions[_PrismaModelT]':
        from .client import get_client

        return actions.MLModelActions[_PrismaModelT](client or get_client(), cls)


class BaseTransaction(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Transaction']] = 'Transaction'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TransactionActions[_PrismaModelT]':
        from .client import get_client

        return actions.TransactionActions[_PrismaModelT](client or get_client(), cls)


class BaseSubscription(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Subscription']] = 'Subscription'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SubscriptionActions[_PrismaModelT]':
        from .client import get_client

        return actions.SubscriptionActions[_PrismaModelT](client or get_client(), cls)


class BaseNotification(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Notification']] = 'Notification'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.NotificationActions[_PrismaModelT]':
        from .client import get_client

        return actions.NotificationActions[_PrismaModelT](client or get_client(), cls)


class BaseAuthToken(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AuthToken']] = 'AuthToken'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AuthTokenActions[_PrismaModelT]':
        from .client import get_client

        return actions.AuthTokenActions[_PrismaModelT](client or get_client(), cls)


class BaseFile(_PrismaModel):
    __prisma_model__: ClassVar[Literal['File']] = 'File'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.FileActions[_PrismaModelT]':
        from .client import get_client

        return actions.FileActions[_PrismaModelT](client or get_client(), cls)


class BaseAuditLog(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AuditLog']] = 'AuditLog'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AuditLogActions[_PrismaModelT]':
        from .client import get_client

        return actions.AuditLogActions[_PrismaModelT](client or get_client(), cls)


